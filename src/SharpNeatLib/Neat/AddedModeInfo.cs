using SharpNeat.Utils;

namespace SharpNeat.Neat
{
    /// <summary>
    /// Represents an added node. When a node is added to a neural network in NEAT an existing connection between two 
    /// nodes is deleted and replaced with the new node and two new connections; one connection between the source node
    /// and the new node, and another from the new node to the target node. This struct stores the IDs of the new node
    /// and the two new connections 
    /// 
    /// This class exists to represent newly added structure in a history buffer of added structures. This allows re-use
    /// of IDs where a mutation recreates a structure that has previously occurred through previous mutations on other 
    /// genomes.
    /// </summary>
    public class AddedNodeInfo
    {
        #region Constructor

        /// <summary>
        /// Construct by assigning new IDs generated by the provided Uint32Sequence.
        /// </summary>
        public AddedNodeInfo(UInt32Sequence idSeq)
        {
            this.AddedNodeId = idSeq.Next();
            this.AddedInputConnectionId = idSeq.Next();
            this.AddedOutputConnectionId = idSeq.Next();
        }

        #endregion

        #region Properties
        
        /// <summary>
        /// The added node's ID.
        /// </summary>
        public uint AddedNodeId { get; }

        /// <summary>
        /// The added input connection's ID.
        /// </summary>
        public uint AddedInputConnectionId { get; }

        /// <summary>
        /// Gets the added output connection's ID.
        /// </summary>
        public uint AddedOutputConnectionId { get; }
        
        #endregion
    }
}